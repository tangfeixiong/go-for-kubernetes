// Code generated by protoc-gen-gogo.
// source: github.com/tangfeixiong/go-to-kubernetes/rap/pb/server.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		github.com/tangfeixiong/go-to-kubernetes/rap/pb/server.proto

	It has these top-level messages:
		VncReqResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VncReqResp struct {
	VncAddr      string `protobuf:"bytes,1,opt,name=vnc_addr,json=vncAddr,proto3" json:"vnc_addr,omitempty"`
	VncSecret    string `protobuf:"bytes,2,opt,name=vnc_secret,json=vncSecret,proto3" json:"vnc_secret,omitempty"`
	AuthToken    string `protobuf:"bytes,3,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	StateCode    int32  `protobuf:"varint,4,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string `protobuf:"bytes,5,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	Token        string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Thumbnail    []byte `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (m *VncReqResp) Reset()                    { *m = VncReqResp{} }
func (m *VncReqResp) String() string            { return proto.CompactTextString(m) }
func (*VncReqResp) ProtoMessage()               {}
func (*VncReqResp) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

func (m *VncReqResp) GetVncAddr() string {
	if m != nil {
		return m.VncAddr
	}
	return ""
}

func (m *VncReqResp) GetVncSecret() string {
	if m != nil {
		return m.VncSecret
	}
	return ""
}

func (m *VncReqResp) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *VncReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *VncReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *VncReqResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VncReqResp) GetThumbnail() []byte {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func init() {
	proto.RegisterType((*VncReqResp)(nil), "pb.VncReqResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GorhService service

type GorhServiceClient interface {
	WebsockifyVNC(ctx context.Context, in *VncReqResp, opts ...grpc.CallOption) (*VncReqResp, error)
}

type gorhServiceClient struct {
	cc *grpc.ClientConn
}

func NewGorhServiceClient(cc *grpc.ClientConn) GorhServiceClient {
	return &gorhServiceClient{cc}
}

func (c *gorhServiceClient) WebsockifyVNC(ctx context.Context, in *VncReqResp, opts ...grpc.CallOption) (*VncReqResp, error) {
	out := new(VncReqResp)
	err := grpc.Invoke(ctx, "/pb.GorhService/WebsockifyVNC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GorhService service

type GorhServiceServer interface {
	WebsockifyVNC(context.Context, *VncReqResp) (*VncReqResp, error)
}

func RegisterGorhServiceServer(s *grpc.Server, srv GorhServiceServer) {
	s.RegisterService(&_GorhService_serviceDesc, srv)
}

func _GorhService_WebsockifyVNC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VncReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorhServiceServer).WebsockifyVNC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GorhService/WebsockifyVNC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorhServiceServer).WebsockifyVNC(ctx, req.(*VncReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _GorhService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GorhService",
	HandlerType: (*GorhServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebsockifyVNC",
			Handler:    _GorhService_WebsockifyVNC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tangfeixiong/go-to-kubernetes/rap/pb/server.proto",
}

func (m *VncReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VncReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VncAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.VncAddr)))
		i += copy(dAtA[i:], m.VncAddr)
	}
	if len(m.VncSecret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.VncSecret)))
		i += copy(dAtA[i:], m.VncSecret)
	}
	if len(m.AuthToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.AuthToken)))
		i += copy(dAtA[i:], m.AuthToken)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Thumbnail) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Thumbnail)))
		i += copy(dAtA[i:], m.Thumbnail)
	}
	return i, nil
}

func encodeFixed64Server(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Server(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VncReqResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.VncAddr)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.VncSecret)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.AuthToken)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovServer(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func sovServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VncReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VncReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VncReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VncAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VncAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VncSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VncSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = append(m.Thumbnail[:0], dAtA[iNdEx:postIndex]...)
			if m.Thumbnail == nil {
				m.Thumbnail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/tangfeixiong/go-to-kubernetes/rap/pb/server.proto", fileDescriptorServer)
}

var fileDescriptorServer = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0x31, 0x4f, 0xe3, 0x30,
	0x14, 0xc0, 0xf1, 0x73, 0xef, 0xda, 0x5e, 0x7c, 0xed, 0x09, 0x59, 0x0c, 0xa1, 0x2a, 0x51, 0x55,
	0x96, 0x0a, 0xa9, 0xb1, 0x80, 0x0d, 0xb1, 0x40, 0x07, 0x26, 0x18, 0x52, 0x54, 0xc6, 0xca, 0x76,
	0x5e, 0x13, 0xab, 0xad, 0x1d, 0x6c, 0x27, 0x82, 0x95, 0xaf, 0xc0, 0xc2, 0x47, 0x62, 0x44, 0x62,
	0x46, 0x42, 0x85, 0x0f, 0x82, 0x92, 0x0c, 0x95, 0x18, 0xdf, 0xff, 0xf7, 0xf4, 0x86, 0x87, 0xcf,
	0x12, 0xe9, 0xd2, 0x9c, 0x87, 0x42, 0xaf, 0xa9, 0x63, 0x2a, 0x59, 0x80, 0xbc, 0x97, 0x5a, 0x25,
	0x34, 0xd1, 0x63, 0xa7, 0xc7, 0xcb, 0x9c, 0x83, 0x51, 0xe0, 0xc0, 0x52, 0xc3, 0x32, 0x9a, 0x71,
	0x6a, 0xc1, 0x14, 0x60, 0xc2, 0xcc, 0x68, 0xa7, 0x49, 0x23, 0xe3, 0xbd, 0x7e, 0xa2, 0x75, 0xb2,
	0x02, 0xca, 0x32, 0x49, 0x99, 0x52, 0xda, 0x31, 0x27, 0xb5, 0xb2, 0xf5, 0xc6, 0xf0, 0x1d, 0x61,
	0x3c, 0x53, 0x22, 0x82, 0xbb, 0x08, 0x6c, 0x46, 0xf6, 0xf0, 0xdf, 0x42, 0x89, 0x39, 0x8b, 0x63,
	0xe3, 0xa3, 0x01, 0x1a, 0x79, 0x51, 0xbb, 0x50, 0xe2, 0x3c, 0x8e, 0x0d, 0xd9, 0xc7, 0xb8, 0x24,
	0x0b, 0xc2, 0x80, 0xf3, 0x1b, 0x15, 0x7a, 0x85, 0x12, 0xd3, 0x2a, 0x94, 0xcc, 0x72, 0x97, 0xce,
	0x9d, 0x5e, 0x82, 0xf2, 0x7f, 0xd7, 0x5c, 0x96, 0x9b, 0x32, 0x94, 0x6c, 0x1d, 0x73, 0x30, 0x17,
	0x3a, 0x06, 0xff, 0xcf, 0x00, 0x8d, 0x9a, 0x91, 0x57, 0x95, 0x89, 0x8e, 0x81, 0x1c, 0xe0, 0x6e,
	0xcd, 0x6b, 0xb0, 0x96, 0x25, 0xe0, 0x37, 0xab, 0x03, 0x9d, 0x2a, 0x5e, 0xd5, 0x8d, 0xec, 0xe2,
	0x66, 0x7d, 0xbd, 0x55, 0x61, 0x3d, 0x90, 0x3e, 0xf6, 0x5c, 0x9a, 0xaf, 0xb9, 0x62, 0x72, 0xe5,
	0xb7, 0x07, 0x68, 0xd4, 0x89, 0xb6, 0xe1, 0x38, 0xc2, 0xff, 0x2e, 0xb5, 0x49, 0xa7, 0x60, 0x0a,
	0x29, 0x80, 0x4c, 0x70, 0xf7, 0x16, 0xb8, 0xd5, 0x62, 0x29, 0x17, 0x0f, 0xb3, 0xeb, 0x09, 0xf9,
	0x1f, 0x66, 0x3c, 0xdc, 0x3e, 0xa0, 0xf7, 0x63, 0x1e, 0x92, 0xc7, 0xb7, 0xaf, 0xa7, 0x46, 0x67,
	0xd8, 0xa6, 0xc5, 0x11, 0x2d, 0x94, 0x38, 0x45, 0x87, 0x17, 0x3b, 0x2f, 0x9b, 0x00, 0xbd, 0x6e,
	0x02, 0xf4, 0xb1, 0x09, 0xd0, 0xf3, 0x67, 0xf0, 0x8b, 0xb7, 0xaa, 0x67, 0x9e, 0x7c, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x23, 0xba, 0x66, 0x1e, 0xae, 0x01, 0x00, 0x00,
}
