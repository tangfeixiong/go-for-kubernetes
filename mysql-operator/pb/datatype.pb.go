// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/datatype.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CrdRecipient_ResourceScope int32

const (
	CrdRecipient_Namespaced CrdRecipient_ResourceScope = 0
	CrdRecipient_Cluster    CrdRecipient_ResourceScope = 1
)

var CrdRecipient_ResourceScope_name = map[int32]string{
	0: "Namespaced",
	1: "Cluster",
}
var CrdRecipient_ResourceScope_value = map[string]int32{
	"Namespaced": 0,
	"Cluster":    1,
}

func (x CrdRecipient_ResourceScope) String() string {
	return proto.EnumName(CrdRecipient_ResourceScope_name, int32(x))
}
func (CrdRecipient_ResourceScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatatype, []int{0, 0}
}

type CrdRecipient struct {
	Group         string                     `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version       string                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Scope         string                     `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Plural        string                     `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
	Singular      string                     `protobuf:"bytes,5,opt,name=singular,proto3" json:"singular,omitempty"`
	Kind          string                     `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	ShortNames    []string                   `protobuf:"bytes,7,rep,name=shortNames" json:"shortNames,omitempty"`
	ListKind      string                     `protobuf:"bytes,8,opt,name=listKind,proto3" json:"listKind,omitempty"`
	ResourceScope CrdRecipient_ResourceScope `protobuf:"varint,9,opt,name=resourceScope,proto3,enum=pb.CrdRecipient_ResourceScope" json:"resourceScope,omitempty"`
}

func (m *CrdRecipient) Reset()                    { *m = CrdRecipient{} }
func (m *CrdRecipient) String() string            { return proto.CompactTextString(m) }
func (*CrdRecipient) ProtoMessage()               {}
func (*CrdRecipient) Descriptor() ([]byte, []int) { return fileDescriptorDatatype, []int{0} }

func (m *CrdRecipient) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CrdRecipient) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CrdRecipient) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *CrdRecipient) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

func (m *CrdRecipient) GetSingular() string {
	if m != nil {
		return m.Singular
	}
	return ""
}

func (m *CrdRecipient) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *CrdRecipient) GetShortNames() []string {
	if m != nil {
		return m.ShortNames
	}
	return nil
}

func (m *CrdRecipient) GetListKind() string {
	if m != nil {
		return m.ListKind
	}
	return ""
}

func (m *CrdRecipient) GetResourceScope() CrdRecipient_ResourceScope {
	if m != nil {
		return m.ResourceScope
	}
	return CrdRecipient_Namespaced
}

type StorageRecipient struct {
	NoProvisionerLocalVolume   *StorageRecipient_NoProvisioner   `protobuf:"bytes,1,opt,name=noProvisionerLocalVolume" json:"noProvisionerLocalVolume,omitempty"`
	ExampleHostpathLocalVolume *StorageRecipient_ExampleHostpath `protobuf:"bytes,2,opt,name=exampleHostpathLocalVolume" json:"exampleHostpathLocalVolume,omitempty"`
	CephRbdPool                *StorageRecipient_Rook            `protobuf:"bytes,3,opt,name=cephRbdPool" json:"cephRbdPool,omitempty"`
}

func (m *StorageRecipient) Reset()                    { *m = StorageRecipient{} }
func (m *StorageRecipient) String() string            { return proto.CompactTextString(m) }
func (*StorageRecipient) ProtoMessage()               {}
func (*StorageRecipient) Descriptor() ([]byte, []int) { return fileDescriptorDatatype, []int{1} }

func (m *StorageRecipient) GetNoProvisionerLocalVolume() *StorageRecipient_NoProvisioner {
	if m != nil {
		return m.NoProvisionerLocalVolume
	}
	return nil
}

func (m *StorageRecipient) GetExampleHostpathLocalVolume() *StorageRecipient_ExampleHostpath {
	if m != nil {
		return m.ExampleHostpathLocalVolume
	}
	return nil
}

func (m *StorageRecipient) GetCephRbdPool() *StorageRecipient_Rook {
	if m != nil {
		return m.CephRbdPool
	}
	return nil
}

type StorageRecipient_NoProvisioner struct {
	PersistentVolumeCapacity string   `protobuf:"bytes,1,opt,name=persistentVolumeCapacity,proto3" json:"persistentVolumeCapacity,omitempty"`
	MountPoint               string   `protobuf:"bytes,2,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	NodeAffinityHostnames    []string `protobuf:"bytes,3,rep,name=nodeAffinityHostnames" json:"nodeAffinityHostnames,omitempty"`
}

func (m *StorageRecipient_NoProvisioner) Reset()         { *m = StorageRecipient_NoProvisioner{} }
func (m *StorageRecipient_NoProvisioner) String() string { return proto.CompactTextString(m) }
func (*StorageRecipient_NoProvisioner) ProtoMessage()    {}
func (*StorageRecipient_NoProvisioner) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatype, []int{1, 0}
}

func (m *StorageRecipient_NoProvisioner) GetPersistentVolumeCapacity() string {
	if m != nil {
		return m.PersistentVolumeCapacity
	}
	return ""
}

func (m *StorageRecipient_NoProvisioner) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *StorageRecipient_NoProvisioner) GetNodeAffinityHostnames() []string {
	if m != nil {
		return m.NodeAffinityHostnames
	}
	return nil
}

type StorageRecipient_ExampleHostpath struct {
	PersistentVolumeCapacity string `protobuf:"bytes,1,opt,name=persistentVolumeCapacity,proto3" json:"persistentVolumeCapacity,omitempty"`
	Path                     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *StorageRecipient_ExampleHostpath) Reset()         { *m = StorageRecipient_ExampleHostpath{} }
func (m *StorageRecipient_ExampleHostpath) String() string { return proto.CompactTextString(m) }
func (*StorageRecipient_ExampleHostpath) ProtoMessage()    {}
func (*StorageRecipient_ExampleHostpath) Descriptor() ([]byte, []int) {
	return fileDescriptorDatatype, []int{1, 1}
}

func (m *StorageRecipient_ExampleHostpath) GetPersistentVolumeCapacity() string {
	if m != nil {
		return m.PersistentVolumeCapacity
	}
	return ""
}

func (m *StorageRecipient_ExampleHostpath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type StorageRecipient_Rook struct {
	PersistentVolumeCapacity string `protobuf:"bytes,1,opt,name=persistentVolumeCapacity,proto3" json:"persistentVolumeCapacity,omitempty"`
}

func (m *StorageRecipient_Rook) Reset()                    { *m = StorageRecipient_Rook{} }
func (m *StorageRecipient_Rook) String() string            { return proto.CompactTextString(m) }
func (*StorageRecipient_Rook) ProtoMessage()               {}
func (*StorageRecipient_Rook) Descriptor() ([]byte, []int) { return fileDescriptorDatatype, []int{1, 2} }

func (m *StorageRecipient_Rook) GetPersistentVolumeCapacity() string {
	if m != nil {
		return m.PersistentVolumeCapacity
	}
	return ""
}

func init() {
	proto.RegisterType((*CrdRecipient)(nil), "pb.CrdRecipient")
	proto.RegisterType((*StorageRecipient)(nil), "pb.StorageRecipient")
	proto.RegisterType((*StorageRecipient_NoProvisioner)(nil), "pb.StorageRecipient.NoProvisioner")
	proto.RegisterType((*StorageRecipient_ExampleHostpath)(nil), "pb.StorageRecipient.ExampleHostpath")
	proto.RegisterType((*StorageRecipient_Rook)(nil), "pb.StorageRecipient.Rook")
	proto.RegisterEnum("pb.CrdRecipient_ResourceScope", CrdRecipient_ResourceScope_name, CrdRecipient_ResourceScope_value)
}

func init() { proto.RegisterFile("pb/datatype.proto", fileDescriptorDatatype) }

var fileDescriptorDatatype = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x66, 0xd3, 0x6d, 0xd2, 0x4c, 0x48, 0x09, 0x16, 0x20, 0xb3, 0x87, 0x2a, 0x8a, 0x38, 0xe4,
	0x80, 0x16, 0x29, 0x70, 0x82, 0x13, 0x04, 0x24, 0x24, 0x50, 0x15, 0xb9, 0x12, 0x47, 0x24, 0xef,
	0xee, 0x34, 0xb1, 0xba, 0xf1, 0x58, 0xb6, 0xb7, 0x22, 0x8f, 0xc3, 0xfb, 0xf0, 0x10, 0x3c, 0x0a,
	0xb2, 0x93, 0xc2, 0xa6, 0x4a, 0xb9, 0xf4, 0xe6, 0x6f, 0x7e, 0xbe, 0x99, 0xf9, 0xf6, 0x5b, 0x78,
	0x6c, 0x8a, 0x57, 0x95, 0xf4, 0xd2, 0x6f, 0x0c, 0xe6, 0xc6, 0x92, 0x27, 0xd6, 0x31, 0xc5, 0xe4,
	0x57, 0x07, 0x1e, 0xce, 0x6d, 0x25, 0xb0, 0x54, 0x46, 0xa1, 0xf6, 0xec, 0x09, 0x1c, 0x2f, 0x2d,
	0x35, 0x86, 0x27, 0xe3, 0x64, 0xda, 0x17, 0x5b, 0xc0, 0x38, 0xf4, 0xae, 0xd1, 0x3a, 0x45, 0x9a,
	0x77, 0x62, 0xfc, 0x06, 0x86, 0x7a, 0x57, 0x92, 0x41, 0x7e, 0xb4, 0xad, 0x8f, 0x80, 0x3d, 0x83,
	0xae, 0xa9, 0x1b, 0x2b, 0x6b, 0x9e, 0xc6, 0xf0, 0x0e, 0xb1, 0x0c, 0x4e, 0x9c, 0xd2, 0xcb, 0xa6,
	0x96, 0x96, 0x1f, 0xc7, 0xcc, 0x5f, 0xcc, 0x18, 0xa4, 0x57, 0x4a, 0x57, 0xbc, 0x1b, 0xe3, 0xf1,
	0xcd, 0xce, 0x00, 0xdc, 0x8a, 0xac, 0x3f, 0x97, 0x6b, 0x74, 0xbc, 0x37, 0x3e, 0x9a, 0xf6, 0x45,
	0x2b, 0x12, 0xf8, 0x6a, 0xe5, 0xfc, 0x97, 0xd0, 0x77, 0xb2, 0xe5, 0xbb, 0xc1, 0xec, 0x23, 0x0c,
	0x2d, 0x3a, 0x6a, 0x6c, 0x89, 0x17, 0x71, 0xc3, 0xfe, 0x38, 0x99, 0x9e, 0xce, 0xce, 0x72, 0x53,
	0xe4, 0xed, 0x93, 0x73, 0xd1, 0xae, 0x12, 0xfb, 0x4d, 0x93, 0x97, 0x30, 0xdc, 0xcb, 0xb3, 0x53,
	0x80, 0x38, 0xdb, 0xc8, 0x12, 0xab, 0xd1, 0x03, 0x36, 0x80, 0xde, 0xbc, 0x6e, 0x9c, 0x47, 0x3b,
	0x4a, 0x26, 0xbf, 0x53, 0x18, 0x5d, 0x78, 0xb2, 0x72, 0x89, 0xff, 0x24, 0xfd, 0x0e, 0x5c, 0xd3,
	0xc2, 0xd2, 0xb5, 0x0a, 0x8a, 0xa1, 0xfd, 0x4a, 0xa5, 0xac, 0xbf, 0x51, 0xdd, 0xac, 0x31, 0xaa,
	0x3c, 0x98, 0x4d, 0xc2, 0x4e, 0xb7, 0xfb, 0xf2, 0xf3, 0x76, 0x93, 0xb8, 0x93, 0x83, 0x55, 0x90,
	0xe1, 0x0f, 0xb9, 0x36, 0x35, 0x7e, 0x26, 0xe7, 0x8d, 0xf4, 0xab, 0xf6, 0x84, 0x4e, 0x9c, 0xf0,
	0xe2, 0xe0, 0x84, 0x4f, 0xfb, 0x6d, 0xe2, 0x3f, 0x3c, 0xec, 0x1d, 0x0c, 0x4a, 0x34, 0x2b, 0x51,
	0x54, 0x0b, 0xa2, 0x3a, 0x7e, 0xee, 0xc1, 0xec, 0xf9, 0x41, 0x5a, 0x41, 0x74, 0x25, 0xda, 0xd5,
	0xd9, 0xcf, 0x04, 0x86, 0x7b, 0xe7, 0xb0, 0xb7, 0xc0, 0x4d, 0xb0, 0x90, 0xf3, 0xa8, 0xfd, 0x76,
	0xc4, 0x5c, 0x1a, 0x59, 0x2a, 0xbf, 0xd9, 0x59, 0xef, 0xce, 0x7c, 0x70, 0xc5, 0x9a, 0x1a, 0xed,
	0x17, 0xa4, 0xb4, 0xdf, 0x19, 0xb2, 0x15, 0x61, 0x6f, 0xe0, 0xa9, 0xa6, 0x0a, 0xdf, 0x5f, 0x5e,
	0x2a, 0xad, 0xfc, 0x26, 0x5c, 0xa3, 0xa3, 0x81, 0x8e, 0xa2, 0x81, 0x0e, 0x27, 0x33, 0x09, 0x8f,
	0x6e, 0xe9, 0x71, 0xaf, 0x25, 0x19, 0xa4, 0x81, 0x63, 0xb7, 0x5e, 0x7c, 0x67, 0x1f, 0x20, 0x0d,
	0xda, 0xdc, 0x87, 0xb7, 0xe8, 0xc6, 0x9f, 0xf7, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72,
	0x4c, 0xbd, 0xe0, 0xd1, 0x03, 0x00, 0x00,
}
