apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    operator: 'redis master slaves'
  labels:
    app: redis
    component: redis
    redis: {{.ProvisioningName}} # my-redis
  name: {{.Name}} # my-redis
  namespace: default
spec:
  podManagementPolicy: OrderedReady
  replicas: {{.Replications}}
  selector:
    matchLabels:
      app: redis
      component: redis
      redis: {{.ProvisioningName}}
  serviceName: {{.ServiceName}} # my-redis
  template:
    metadata:
      labels:
        app: redis
        component: redis
        redis: {{.ProvisioningName}} # my-redis
    spec:
      containers:
      - args:
        - redis-server
        - /data/redis.conf
        command:
        - docker-entrypoint.sh
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/redis:4.0-alpine
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -h $(hostname) ping
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: redis
        ports:
        - containerPort: 6379
          name: client
          protocol: TCP
        - containerPort: 16379
          name: gossip
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -h $(hostname) ping
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: store
        - mountPath: /podinfo
          name: podinfo
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - config-ha
        - --name={{.Name}}
        - --conf_dir=/data
        - redis
        command:
        - /redis-operator
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_REPLICAS
          value: "2"
        image: docker.io/tangfeixiong/redis-operator
        imagePullPolicy: IfNotPresent
        name: bootstrap
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: store
        - mountPath: /podinfo
          name: podinfo
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: store
      - downwardAPI:
          defaultMode: 420
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.annotations
            path: annotations
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
            path: name
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
        name: podinfo
  updateStrategy:
    type: RollingUpdate