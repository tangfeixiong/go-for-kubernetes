// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/service.proto
	pb/message.proto

It has these top-level messages:
	CrdReqResp
	CrdRecipient
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CrdReqResp struct {
	Recipe       *CrdRecipient `protobuf:"bytes,1,opt,name=recipe" json:"recipe,omitempty"`
	StateCode    int32         `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string        `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *CrdReqResp) Reset()                    { *m = CrdReqResp{} }
func (m *CrdReqResp) String() string            { return proto.CompactTextString(m) }
func (*CrdReqResp) ProtoMessage()               {}
func (*CrdReqResp) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *CrdReqResp) GetRecipe() *CrdRecipient {
	if m != nil {
		return m.Recipe
	}
	return nil
}

func (m *CrdReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *CrdReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*CrdReqResp)(nil), "pb.CrdReqResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RedisOpService service

type RedisOpServiceClient interface {
	CreateCrd(ctx context.Context, in *CrdReqResp, opts ...grpc.CallOption) (*CrdReqResp, error)
	ReapCrd(ctx context.Context, in *CrdReqResp, opts ...grpc.CallOption) (*CrdReqResp, error)
}

type redisOpServiceClient struct {
	cc *grpc.ClientConn
}

func NewRedisOpServiceClient(cc *grpc.ClientConn) RedisOpServiceClient {
	return &redisOpServiceClient{cc}
}

func (c *redisOpServiceClient) CreateCrd(ctx context.Context, in *CrdReqResp, opts ...grpc.CallOption) (*CrdReqResp, error) {
	out := new(CrdReqResp)
	err := grpc.Invoke(ctx, "/pb.RedisOpService/CreateCrd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisOpServiceClient) ReapCrd(ctx context.Context, in *CrdReqResp, opts ...grpc.CallOption) (*CrdReqResp, error) {
	out := new(CrdReqResp)
	err := grpc.Invoke(ctx, "/pb.RedisOpService/ReapCrd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedisOpService service

type RedisOpServiceServer interface {
	CreateCrd(context.Context, *CrdReqResp) (*CrdReqResp, error)
	ReapCrd(context.Context, *CrdReqResp) (*CrdReqResp, error)
}

func RegisterRedisOpServiceServer(s *grpc.Server, srv RedisOpServiceServer) {
	s.RegisterService(&_RedisOpService_serviceDesc, srv)
}

func _RedisOpService_CreateCrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrdReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisOpServiceServer).CreateCrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedisOpService/CreateCrd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisOpServiceServer).CreateCrd(ctx, req.(*CrdReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisOpService_ReapCrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrdReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisOpServiceServer).ReapCrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedisOpService/ReapCrd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisOpServiceServer).ReapCrd(ctx, req.(*CrdReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedisOpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RedisOpService",
	HandlerType: (*RedisOpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrd",
			Handler:    _RedisOpService_CreateCrd_Handler,
		},
		{
			MethodName: "ReapCrd",
			Handler:    _RedisOpService_ReapCrd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0xc9, 0x88, 0x23, 0xfd, 0xd5, 0x61, 0x08, 0x82, 0xa5, 0x38, 0x50, 0xea, 0xa6, 0xb8,
	0x68, 0x70, 0xdc, 0xb9, 0x2d, 0x6e, 0x04, 0x11, 0xe2, 0x01, 0x24, 0x4d, 0x7e, 0x4a, 0x40, 0x9b,
	0xdf, 0x24, 0xcc, 0xc2, 0xa5, 0x57, 0xf0, 0x08, 0x1e, 0xc9, 0x2b, 0x78, 0x10, 0x69, 0x5a, 0x5c,
	0x88, 0x0b, 0x97, 0x79, 0x2f, 0xef, 0x7b, 0x79, 0x81, 0x35, 0x75, 0x22, 0xa0, 0xdf, 0x59, 0x8d,
	0x0d, 0x79, 0x17, 0x1d, 0x5f, 0x50, 0x57, 0x9c, 0xf5, 0xce, 0xf5, 0x4f, 0x28, 0x14, 0x59, 0xa1,
	0x86, 0xc1, 0x45, 0x15, 0xad, 0x1b, 0xc2, 0x74, 0xa3, 0x18, 0x33, 0xcf, 0x18, 0x82, 0xea, 0xe7,
	0x4c, 0xf5, 0x0a, 0xd0, 0x7a, 0x23, 0xf1, 0x45, 0x62, 0x20, 0x5e, 0xc3, 0xd2, 0xa3, 0xb6, 0x84,
	0x39, 0x2b, 0x59, 0x7d, 0xb8, 0x5d, 0x37, 0xd4, 0x35, 0xc9, 0xd7, 0x96, 0x2c, 0x0e, 0x51, 0xce,
	0x3e, 0xdf, 0x00, 0x84, 0xa8, 0x22, 0x3e, 0x6a, 0x67, 0x30, 0x5f, 0x94, 0xac, 0xde, 0x97, 0x59,
	0x52, 0x5a, 0x67, 0x90, 0x9f, 0xc3, 0xf1, 0x64, 0xcf, 0x6d, 0xf9, 0x5e, 0xc9, 0xea, 0x4c, 0x1e,
	0x25, 0xf1, 0x6e, 0xd2, 0xb6, 0x1f, 0x0c, 0x56, 0x12, 0x8d, 0x0d, 0xf7, 0xf4, 0x30, 0x0d, 0xe1,
	0xb7, 0x90, 0xb5, 0x1e, 0x47, 0x8a, 0x37, 0x7c, 0xf5, 0xd3, 0x9e, 0x5e, 0x57, 0xfc, 0x3a, 0x57,
	0x9b, 0xb7, 0xcf, 0xaf, 0xf7, 0xc5, 0x69, 0xc5, 0x85, 0x1f, 0x29, 0x8e, 0xc6, 0xd1, 0xbb, 0x4b,
	0xa1, 0xbd, 0xb9, 0x66, 0x17, 0xfc, 0x06, 0x0e, 0x24, 0x2a, 0xfa, 0x0f, 0xa9, 0x48, 0xa4, 0x13,
	0xfe, 0x07, 0xa9, 0x5b, 0xa6, 0x8f, 0xba, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x90, 0xc9,
	0xfa, 0x70, 0x01, 0x00, 0x00,
}
