// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/tangfeixiong/go-to-kubernetes/rabbitmq-operator/pkg/apis/example.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AmqpLister helps list Amqps.
type AmqpLister interface {
	// List lists all Amqps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Amqp, err error)
	// Amqps returns an object that can list and get Amqps.
	Amqps(namespace string) AmqpNamespaceLister
	AmqpListerExpansion
}

// amqpLister implements the AmqpLister interface.
type amqpLister struct {
	indexer cache.Indexer
}

// NewAmqpLister returns a new AmqpLister.
func NewAmqpLister(indexer cache.Indexer) AmqpLister {
	return &amqpLister{indexer: indexer}
}

// List lists all Amqps in the indexer.
func (s *amqpLister) List(selector labels.Selector) (ret []*v1alpha1.Amqp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Amqp))
	})
	return ret, err
}

// Amqps returns an object that can list and get Amqps.
func (s *amqpLister) Amqps(namespace string) AmqpNamespaceLister {
	return amqpNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AmqpNamespaceLister helps list and get Amqps.
type AmqpNamespaceLister interface {
	// List lists all Amqps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Amqp, err error)
	// Get retrieves the Amqp from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Amqp, error)
	AmqpNamespaceListerExpansion
}

// amqpNamespaceLister implements the AmqpNamespaceLister
// interface.
type amqpNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Amqps in the indexer for a given namespace.
func (s amqpNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Amqp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Amqp))
	})
	return ret, err
}

// Get retrieves the Amqp from the indexer for a given namespace and name.
func (s amqpNamespaceLister) Get(name string) (*v1alpha1.Amqp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("amqp"), name)
	}
	return obj.(*v1alpha1.Amqp), nil
}
