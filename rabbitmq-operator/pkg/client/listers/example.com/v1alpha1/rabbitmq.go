// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/tangfeixiong/go-to-kubernetes/rabbitmq-operator/pkg/apis/example.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RabbitmqLister helps list Rabbitmqs.
type RabbitmqLister interface {
	// List lists all Rabbitmqs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Rabbitmq, err error)
	// Rabbitmqs returns an object that can list and get Rabbitmqs.
	Rabbitmqs(namespace string) RabbitmqNamespaceLister
	RabbitmqListerExpansion
}

// rabbitmqLister implements the RabbitmqLister interface.
type rabbitmqLister struct {
	indexer cache.Indexer
}

// NewRabbitmqLister returns a new RabbitmqLister.
func NewRabbitmqLister(indexer cache.Indexer) RabbitmqLister {
	return &rabbitmqLister{indexer: indexer}
}

// List lists all Rabbitmqs in the indexer.
func (s *rabbitmqLister) List(selector labels.Selector) (ret []*v1alpha1.Rabbitmq, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rabbitmq))
	})
	return ret, err
}

// Rabbitmqs returns an object that can list and get Rabbitmqs.
func (s *rabbitmqLister) Rabbitmqs(namespace string) RabbitmqNamespaceLister {
	return rabbitmqNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitmqNamespaceLister helps list and get Rabbitmqs.
type RabbitmqNamespaceLister interface {
	// List lists all Rabbitmqs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Rabbitmq, err error)
	// Get retrieves the Rabbitmq from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Rabbitmq, error)
	RabbitmqNamespaceListerExpansion
}

// rabbitmqNamespaceLister implements the RabbitmqNamespaceLister
// interface.
type rabbitmqNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Rabbitmqs in the indexer for a given namespace.
func (s rabbitmqNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Rabbitmq, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rabbitmq))
	})
	return ret, err
}

// Get retrieves the Rabbitmq from the indexer for a given namespace and name.
func (s rabbitmqNamespaceLister) Get(name string) (*v1alpha1.Rabbitmq, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rabbitmq"), name)
	}
	return obj.(*v1alpha1.Rabbitmq), nil
}
