<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>https0x3A0x2F0x2Fgithub0x2Ecom0x2Ftangfeixiong0x2Fgo-to-kubernetes</groupId>
        <artifactId>hadoop-Kubernetes</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <groupId>https0x3A0x2F0x2Fgithub0x2Ecom0x2Ftangfeixiong0x2Fgo-to-kubernetes</groupId>
    <artifactId>hdfs-java</artifactId>
    <version>latest</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <hadoop.version>3.0.0</hadoop.version>
        <log4j.version>1.2.17</log4j.version>
<!--        <commons-io.version>1.3.2</commons-io.version>-->
        <docker-registry>docker.io/tangfeixiong</docker-registry>
        <image-repository>${project.artifactId}</image-repository>
        <image-tag>${project.version}</image-tag>
<!--        <image-tag>latest</image-tag>-->
		<oracle-java-url>http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz</oracle-java-url>
    </properties>


    <dependencies>
        <!-- Hadoop main client artifact -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.7</version>
		</dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-io -->
<!--        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons-io.version}</version>
        </dependency>-->
    </dependencies>

    <build>
        <plugins>
		    <!-- https://github.com/saagie/saagie-maven-plugin -->
            <plugin>
               <groupId>io.saagie</groupId>
               <artifactId>saagie-maven-plugin</artifactId>
               <version>1.0.3</version>
               <configuration>
                 <platformId>1</platformId>
                 <jobName>example-java-read-and-write-from-hdfs</jobName>
                 <jobCategory>extract</jobCategory>
               </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>io.stackdocker.saagie0x2Fexample_java_read_and_write_from_hdfs.Main</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- https://maven.apache.org/plugins-archives/maven-assembly-plugin-2.2.2/index.html
		        If your project wants to package your artifact in an uber-jar, the assembly plugin provides only basic support. For more control, use the Maven Shade Plugin. -->
		    <!-- http://www.automationace.com/2016/04/maven-shade-plugin-is-better-than-maven.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
<!--                        <phase>package</phase>-->
                        <phase>none</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
								     <mainClass>io.stackdocker.saagie0x2Fexample_java_read_and_write_from_hdfs.Main</mainClass>
                                    <manifestEntries>
                                        <Main-Class>io.stackdocker.saagie0x2Fexample_java_read_and_write_from_hdfs.Main</Main-Class>
                                        <Build-Number>1.0</Build-Number>
                                    </manifestEntries>
                                </transformer>

                               <!-- https://gist.github.com/BDF/393fe8739b035f461ce4 -->
							    <!-- The goal was to create an uber-jar out of the Spring boot application... -->
							    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
							        <resource>META-INF/spring.handlers</resource>
							    </transformer>
							    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
							        <resource>META-INF/spring.schemas</resource>
							    </transformer>
							    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
							        <resource>META-INF/spring.factories</resource>
							    </transformer>
								
								 <!-- Add a transformer to exclude any other manifest files (possibly from dependencies). -->
<!--                                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                  <resource>MANIFEST.MF</resource>
                                </transformer>-->

                                <!-- Add a transformer to include your custom manifest file. -->
<!--                                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                  <resource>META-INF/MANIFEST.MF</resource>
                                  <file>src/main/resources/META-INF/MANIFEST.MF</file>
                                </transformer>-->
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		    <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-resources-plugin</artifactId>
		        <version>3.0.2</version>
		        <configuration>
			      <resources>
			        <resource>
			          <directory>src/main/resources</directory>
			          <includes>
			            <include>*.properties</include>
					  </includes>
					  <excludes>
			            <exclude>**/*.doc</exclude>
			            <exclude>**/*.pdf</exclude>
			          </excludes>
			        </resource>
			      </resources>		
		        </configuration>					    
		    </plugin>
			
            <!-- https://github.com/fabric8io/docker-maven-plugin -->
			<plugin>
             <groupId>io.fabric8</groupId>
             <artifactId>docker-maven-plugin</artifactId>
             <version>0.24.0</version>
             <extensions>true</extensions>
			 <configuration>
			   <images>
			     <image>
			       <name>${docker-registry}/${image-repository}:${image-tag}</name>
			       <build>
			         <assembly>
<!--                       <descriptorRef>artifact-with-dependencies</descriptorRef>-->
					    <descriptorRef>artifact</descriptorRef>
                     </assembly>
<!--			         <dockerFileDir>${project.basedir}/src/main/docker/io-dot-fabric8</dockerFileDir>-->
				     <dockerFileDir>io-dot-fabric8</dockerFileDir>
<!--					 <dockerFile>Dockerfile.oracle-server-jre1.8</dockerFile>-->
				     <args>
				         <jarTgt>${project.build.finalName}.jar</jarTgt>
				         <javaUri>${oracle-java-url}</javaUri>
					 </args>
					 <nocache>true</nocache>
			       </build>
			     </image>
			   </images>
			 </configuration>
			 <executions>
			   <execution>
			     <id>docker-build</id>
			     <goals>
			       <goal>build</goal>
			     </goals>
			   </execution>
			 </executions>
			</plugin>

           <!-- https://github.com/spotify/dockerfile-maven -->			
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.3.7</version>
				<executions>
				    <execution>
				      <id>default</id>
				      <goals>
				        <goal>build</goal>
				        <goal>push</goal>
				      </goals>
				    </execution>
				</executions>
				<configuration>
				    <contextDirectory>${project.basedir}/src/main/docker/com-dot-spotify</contextDirectory>
				    <repository>${docker-registry}/${image-repository}</repository>
<!--				    <tag>${project.version}</tag>-->
                   <skip>true</skip>
                   <build.noCache>true</build.noCache>
				    <buildArgs>
				      <jarTgt>${project.build.finalName}.jar</jarTgt>
				    </buildArgs>
				</configuration>
			</plugin>
			
			<!-- https://github.com/spotify/docker-maven-plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<configuration>
					<imageName>${docker-registry}/${image-repository}</imageName>
					<dockerDirectory>src/main/docker/com-dot-spotify</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

        </plugins>
    </build>

</project>